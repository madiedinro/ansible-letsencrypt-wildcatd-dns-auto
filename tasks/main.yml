---
- import_tasks: "tasks/ensure.yml"

############################################################################################################
######### AcmeDNS server setup
############################################################################################################

- block:
  - name: Generating config for acme-dns
    template:
      dest: "{{_r_acmedns_config_dir}}/config.cfg"
      src: "config.cfg.j2"
      force: yes
  - name: Building acmedns image
    include_role:
      name: dr.docker-container
    vars:
      drdc_name: acmedns
      drdc_repo: https://github.com/joohoi/acme-dns.git
      drdc_net_mode: 'host'
      drdc_memory_limit: '100m'
      drdc_volumes: 
        - "{{_r_acmedns_data_dir}}:/var/lib/acme-dns"
        - "{{_r_acmedns_config_dir}}:/etc/acme-dns:ro"
  tags: ['acmedns']
  when: '_r_acmedns == True'


############################################################################################################
######### AcmeDNS configuration
############################################################################################################


- block:
  - import_tasks: "tasks/register.yml"
    when: "_r_register == True and loc_gen.subdomain is not defined"
    tags: ["acmech", "acmech-register"]
  
  - pause:
      prompt: |
        Add record to your dns and press enter
        
        _acme-challenge.{{domain}}  CNAME  {{loc_gen.fulldomain}}

  - command: "dig _acme-challenge.{{domain}} +short"
    register: domain_check_result
    failed_when: "loc_gen.fulldomain not in domain_check_result.stdout"
    changed_when: False

  - file:
      state: touch
      path: "{{_r_acmesh_log}}"
    when: "_r_request == True"

  - name: Executing acme.sh 
    docker_container:
      name: acmesh
      image: "madiedinro/acmesh"
      env: 
        ACMEDNS_UPDATE_URL: "{{_r_acmedns_api}}/update"
        ACMEDNS_USERNAME: "{{loc_gen.username}}"
        ACMEDNS_PASSWORD: "{{loc_gen.password}}"
        ACMEDNS_SUBDOMAIN: "{{loc_gen.subdomain}}"
      volumes: 
        - "{{_r_acmesh_host_cert_root}}/{{domain}}/:{{_r_acmesh_dock_cert_root}}/{{domain}}"
        - "{{_r_acmesh_log}}:/acme.sh/acme.sh.log"
      # auto_remove: yes
      cleanup: yes
      detach: false
      command: ' --issue -d {{item.domain}} -d "*.{{item.domain}}" --dns dns_acmedns --dnssleep 15 --force --log'
    register: acmesh_result
    when: "_r_request == True"
  vars:
    item: "{{_r_domains[0]}}"
    loc_acmedns: "{{ ansible_local.acmedns|default({}) }}"
    loc_gen: "{{ loc_acmedns.general|default({}) }}"
  tags: ['acmesh']

- debug: msg={{acmesh_result.ansible_facts.docker_container.Output.split('\n')}}
