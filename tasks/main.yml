---
- name: Ensures that all requires paths exists
  file:
    state: directory
    path: "{{fn}}"
  loop: "{{_r_ensure_paths}}"
  loop_control:
    loop_var: fn

- block:
    - block:
        - block:
            - name: Initialize registration process
              uri: url="{{_r_acmedns_api}}/register" method=POST return_content=yes body_format=json status_code=201
              register: reg_result

            - name: create directory for ansible custom facts
              file: state=directory recurse=yes path=/etc/ansible/facts.d

            - debug: var=res

            - template:
                src: config.fact.j2
                dest: "{{_r_reg_data}}"

            - name: re-read facts after adding custom fact
              setup: filter=ansible_local
          vars:
            res: "{{reg_result.json}}"
            _facts_dict:
              fulldomain: "{{res.fulldomain}}"
              password: "{{res.password}}"
              subdomain: "{{res.subdomain}}"
              username: "{{res.username}}"
          when: "loc_gen.subdomain is not defined"

        - debug: var=loc_gen

        - name: checking dns
          command: "dig _acme-challenge.{{item.domain}} +short"
          register: initial_domain_check
          changed_when: False
          failed_when: False
        
        # ##### DNS zone checking 
        - block:
            - pause:
                prompt: "{{ lookup('template', 'zone.j2') }}"
                
            - name: checking dns
              command: "dig _acme-challenge.{{item.domain}} +short"
              register: domain_check_result
              changed_when: False
              failed_when: "False"

            - fail:
                msg: DNS record not found
              when: "loc_gen.fulldomain not in domain_check_result.stdout"
          
          when: "loc_gen.fulldomain not in initial_domain_check.stdout"

      when: "_r_wildcard == True"

    - wait_for:
        host: 0.0.0.0
        port: 80
        timeout: 5
        msg: "Timeout waiting for 80 to respond"
      register: port_check
      when: "_r_wildcard == False"
      ignore_errors: yes

    - name: Create a volume
      docker_volume:
        name: acmesh

    - file:
        state: directory
        path: "{{_r_cert_root}}/{{item.domain}}"

    - debug: 
        msg: "Acme.sh cmd: {{cmd}} httpd_found: {{httpd_found}} auto_expose: {{auto_expose}}"

    - docker_container:
        name: acmesh-daemon
        state: absent

    - name: Executing acme.sh 
      docker_container:
        name: acmesh-request
        image: "{{_r_image}}"
        env: "{{envs}}"
        volumes: "{{vols}}"
        networks: "{{_r_docker_networks}}"
        cleanup: yes
        detach: false
        command: "{{ cmd }}"
        ports: [ "{{ auto_expose }}" ]
      register: acmesh_result
      # failed_when: "'Cert success' not in acmesh_result.ansible_facts.docker_container.Output"

    - debug: msg={{acmesh_result.ansible_facts.docker_container.Output.split('\n')}}

    - docker_container:
        name: acmesh-daemon
        image: "{{_r_image}}"
        restart_policy: unless-stopped
        restart: yes
        labels: "{{_r_docker_labels}}"
        networks: "{{_r_docker_networks}}"
        ports: [ "{{regular_expose}}" ]
        pull: yes
        recreate: yes
        env: "{{envs}}"
        volumes: "{{vols}}"
        command: daemon

  vars:
    cmd: " --issue {{_r_wildcard|ternary(_r_cmd_dns, _r_cmd_std)}} {{_r_cmd_files}} {{_r_cmd_log}} {{_r_cmd_force}} "
    regular_expose: "{{_r_bind_addr}}:80"
    world_expose: '0.0.0.0:80:80'
    auto_expose: "{{  httpd_found|ternary(regular_expose, world_expose) }}"
    httpd_found: "{{ not port_check is failed }}"
    item:
      domain: "{{_r_domain}}"
      subdomains: "{{_r_subdomains}}"
    loc_acmedns: "{{ ansible_local.acmedns|default({}) }}"
    loc_gen: "{{ loc_acmedns.general|default({}) }}"
    vols:
      - "{{_r_cert_root}}:/certs"
      - "acmesh:/acme.sh"
    envs:
      ACMEDNS_UPDATE_URL: "{{_r_acmedns_api|default('')}}/update"
      ACMEDNS_USERNAME: "{{loc_gen.username|default('')}}"
      ACMEDNS_PASSWORD: "{{loc_gen.password|default('')}}"
      ACMEDNS_SUBDOMAIN: "{{loc_gen.subdomain|default('')}}"
  
